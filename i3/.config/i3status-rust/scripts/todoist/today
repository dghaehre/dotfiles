#!/usr/bin/env janet
(import sh)
(import json)
(import sqlite3 :as sql)

(defn read-from-file [file-path]
  (let [f         (file/open file-path :r)
        content   (file/read f :all)]
    (file/close f)
    content))

# Hacky ðŸ™ƒ
(defn url-escape [s]
  (->> s
      (string/replace-all " " "%20")
      (string/replace-all "#" "%23")
      (string/replace-all "&" "%26")))

(defn parse-filter [f]
  (let [[name s] (string/split "=" f)
        filter_ (if (empty? s) "" s)]
    {:name name :filter s}))

(defn setup []
  (let [path        (string (os/getenv "HOME") "/.todoist.token")
        token       (-> (read-from-file path) (string/trim))
        filter-path (string (os/getenv "HOME") "/.todoist.filter")
        t-filter (try # Defaults to no filter
                   (-> (read-from-file filter-path)
                       (string/trim)
                       (parse-filter))
                   ([err] ""))]
    (setdyn :todoist/token token)
    (setdyn :todoist/filter t-filter)))

(defn token []
  (dyn :todoist/token))

(defn f-filter []
  (dyn :todoist/filter))

(defn today-date []
  (let [d (os/date (os/time) :local)
        y (get d :year)
        m (+ 1 (get d :month))
        day (+ 1 (get d :month-day))]
    (string y "-" m "-" day "T00:00:00+01:00")))

(defn get-todoist [path]
  (let [auth (string "Authorization: Bearer " (token))
        res (sh/$< curl -s -X GET ,path  -H ,auth)]
    (json/decode res)))

(defn get-today-count []
  (let [filter_ (if (empty? (f-filter))
                  "(today|overdue)"
                  (string "(today|overdue)%26" (-> (get (f-filter) :filter)
                                                   (url-escape))))]
    (-> (get-todoist (string "https://api.todoist.com/rest/v2/tasks?filter=" filter_))
        (length))))

# Filter doesnt work for sync api
(defn get-completed-today-count []
  (-> (get-todoist (string "https://api.todoist.com/sync/v9/completed/get_all?limit=200&since=" (today-date)))
      (get "items")
      (length)))

(defn display [today-count today-completed]
  (let [donebar     (string/repeat "â–°" today-completed) 
        context     (if (empty? (f-filter))
                        ""
                        (string " " (get (f-filter) :name) " "))
        notdonebar  (string/repeat "â–±" today-count)]
    (prin (string context donebar notdonebar "  "))))

(defn main [& args]
  (setup)
  (try
    (let [today-count     (get-today-count)
          completed-count (get-completed-today-count)]
      (display today-count completed-count))
    ([err] (prin err))))
