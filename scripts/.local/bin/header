#!/usr/bin/env janet

#####################################################################
#   Lets dog food this shit.                                        #
#                                                                   #
#   This script tries to make it easy to create headers like this.  #
#####################################################################

(defn get-comment-chars [ftype]
  "Defaults to #"
  (def supported-filetypes
    {:go          "//"
     :golang      "//"
     :js          "//"
     :vim         "\""
     :javascript  "//"
     :janet       "#"
     :roc         "#"
     :haskell     "--"
     :hs          "--"
     :rust        "//"
     :rs          "//"
     :lua         "--"
     :bash        "#"})
  (if (nil? ftype) "#"
    (get supported-filetypes (keyword ftype) "#")))

(def left-padding "   ")

(defn add-header-and-footer [input comment-chars space-padding]
  "Adding header and footer for the whole input string"
  (defn get-max [len line] (if (> len (length line)) len (length line)))
  (def max-length (reduce get-max 0 (string/split "\n" input)))
  (def line (->> (/ max-length (length comment-chars))
                 (math/ceil)
                 (+ 2)
                 (string/repeat comment-chars)))
  (def with-space-padding (string/repeat (string comment-chars "\n") space-padding))
  (string line "\n" with-space-padding input  "\n" with-space-padding line))

(defn add-line-endings [input comment-chars]
  "Add `commant-chars` at the end of every line"

  (def lines (string/split "\n" input))
  (def end-length (length (get lines 0)))

  (defn add-line-ending [line]
    (if (>= (length line) end-length)
      (string line comment-chars)
      (do
        (def line-length (length line))
        (def until-end (- end-length line-length))
        (string line (string/repeat " " until-end) comment-chars))))

  (-> (map add-line-ending lines)
      (string/join "\n")))

(defn format [input comment-chars space-padding]
  "Make input fancy"
  (as-> input _
      (string/replace-all comment-chars "" _) # Remove all comment-chars, should be done better
      (string/trim _) # Remove all leading and trailing whitespace
      (string/split "\n" _) # Make list of lines
      (map |(string/trim $0 comment-chars) _) # Remove comments
      (map |(string/trim $0) _) # Remove leading and trailing whitespace again..
      (map |(string comment-chars left-padding $0) _) # Add comments
      (string/join _ "\n")
      (add-header-and-footer _ comment-chars space-padding)
      (add-line-endings _ comment-chars)))

(comment
  (prin (as-> (add-header-and-footer "some test" "//") _
              (add-line-endings _ "//")))

  (let [res (format "some test" (get-comment-chars "go") 1)
        double-res (format res (get-comment-chars "go") 1)]
    (prin double-res)))


(defn main [_ &opt ftype space-padding]
  """
  space-padding is how much space you want between the comment chars and the text. default: 0
  """
  (def space-padding (if (nil? space-padding) 0 (scan-number space-padding)))
  (default space-padding 0)
  (-> (file/read stdin :all)
      (format (get-comment-chars ftype) space-padding)
      (print)))
